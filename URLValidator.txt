CS 362 Final Project Report
Justin Siddon, Onur Ozay, Andrew Pierno, Martin Stryffeler

Testing Methodology

Manual Testing Examples:

"http:/en.wikipediA.org"
"http//en.wikipediA.org"
"http:///en.wikipediA.org"
"http://www.en.wikipediA.org"
"http://wwwwwwww.en.wikipediA.org"
"http://w.en.wikipediA.org"
"http://org.en.wikipediA.www"
"http://en.wikipediA.org"
"http://rrr.en.wikipediA.org"
"http://kkk.en.wikipediA.org"
"http://WWW.en.wikipediA.org"
"http://en.wikipedi>A.org"
"http://en.wikipediA.oRg"
"http://en.wiki?pediA.org"
"http://en.wiki[p]ediA.org"
"http://en.wik'i'pediA.org"
"http://en.w>ikipediA.org"
"http://en.wikipediA0.org"
"http://www.1234.com"
"http://en.wikipediA.org"
"htps://www.oregonstate.edu"
"tttt://www.oregonstate.edu"


Input Partitioning

testDomainPartitions, domain partition test function
The testDomainPartitions method steps through an array of input domains, calling the isValid method on each potential url
combination. What make this method helpful for testing is each url is passes to the isValid method consists of valid
url piece combinations except for a single element. For example a possible url it will pass to isValid is "http//www.google.com/test/testing?t=1"
what makes this url example helpful is only the url scheme portion of the url is invalid. This lets implements Agan's
5th testing principle "Only change 1 thing at a time" automatically across multiple tests, helping us localize bugs.

Partitions
We made 4 different partitions based on how the isValid method checks a url. We divided up each partition into two
separate partitions; one with valid and another with invalid values. This allowed us to toggle one partition at a time
as invalid, helping us to localize faults.

Scheme partitions
Reading through the documentation for valid/invalid schemes it seemed three different things could result in
and scheme being declared as invalid; scheme misspelling, incorrect colon's and brackets, and last not including a scheme.
To support this we divided this partition into 3; first we made the scheme invalid by misspelling http.
Next we removed the color from http which should should also cause the url to fail. Last we didn't include the
scheme at all.

Authority partitions
Reading through documentation of authority we found how its determined as valid invalid was very similar to
the scheme. It validates IP, urls without www, and urls with www so we broke this partition into 3.
The first invalid value selected was blank, as they are never used. The next was an IP address to large (it had
a 265 in it) and last was an invalid IP address with not enough numbers. Curiously this input partition revealed a bug
in the isValid method with its "valid" partitions. The "www.google.ru" wasn't being passed as valid. A bug report was
written noting this.

Path partitions
For our path partitions we determined blank paths (paths only with a space character) and paths not beginning
with a "/" are considered invalid. So we divided this partition in 2. The first invalid value is " " and the second
is begins with a letter instead of a "/".

Query partitions
The Query partition was dividing into two. The first invalid test case had invalid
characters which should a cause a failure as noted in the url query standards. The second
was designed to test a query in an invalid format (not following the ?field=value)
format defined in the query specifications, the test cased didn't include the "?" mark
which indicates the string is a query.


Programmatic Testing

The test is valid method creates a way to programmatically test url pieces.  It begins by creating an array of options
for the scheme, authority, ports, path, options, and queries consisting of only valid elements. There is then a loop that randomly selects
an item in the array from each of the url pieces and runs them through the url validator. We know that since
each of the url pieces arrays all contain only valid elements, they all should pass. This same procedure is
repeated for url pieces that should fail. Since we know what should and should not pass, it is fairly easy to check
when a test fails. The number of tests can be varied by adjusting the loop counter. The bugs are then kept track of in
another array such that when the tests are complete, we can print out the failed tests and count the number of test results.


Methodology for finding failures.

The first step we took as a group was to write correct test. This may not sound very profound but I came across this several times
when reporting bugs for other students' dominion code when the actual bug was in my test. It helped that the url validator testing
just used a url so there wasn't as much set up required and the complexity of set up was relatively small. This was tremendously helpful
because we could be reasonably sure that a url should pass and that at least the test was a correctly written test. After writing
tests that had a decent amount of coverage based on reading the entire source code base to better understand the system, it was time to
make it fail. Running the programming based tests several thousand times resulted in many failed urls or urls that should have failed but
did not. Making it fail was the simplest part of the process. Next, it was clear there was some similarities between failing tests and the
way a valid url is constructed lent itself well to divide and conquer. We could effectively trim off parts of the url to see what the smallest
url string could be while still making the test fail ( or pass incorrectly ). It should be noted, smallest here simply means a url with the least
amount of components ( for example, taking the port number and query off of a url. ). At the same time we were dividing and conquering, we were
also only changing one url component at a time, and re-running the tests to make sure the outcome didnt unexpectedly change. Once the url could not
be trimmed any further, there was typically only a few places ( functions ) to look for the fault. After identifying the method the error was in
it was fairly trivial to change one suspicious thing at a time to find the failure line. Sometimes it was helpful to comment out the whole
function and return a static value ( perhaps making the test pass if it was failing ) to know that you are in the correct method that has the
failure.


How We Collaborated

We communicated through email and Google Hangouts. To collaborate during test development we relied
heavily on our groups Github repo we set up specifically for this project. At each stage
of the project, we held a meeting on Google Hangouts and divided the work. For part A, we all contributed to
the text document. For part B, we each took a different testing method, researched, then developed the method
and pushed our tests and with a writeup to the shared repo. Then we all had another group meeting where each of
us introduced our test method and walked the rest of the group through the test method. This line-by-line
code review helped ensure our test methods were functioning the way we intended. Once we accepted the test methods
we began debugging. Each of us were assigned a bug we didn't actually locate, that way we had to work through
parts of the code we weren't as familiar with to localize the fault. This helped us better apply Agan's principles
and write non-biased bug reports.


 BUG REPORT:
 ==============================
 Title: Logic Error in isValidInet4Address method

 Class: Logic Error

 Date: 3/6/16
 Reported By: Andrew Pierno
 Email: piernoa@oregonstate.edu


 Product:    URL Validator
 Platform:   OSx                  Version: 10.11.1
 Browser:    NA


 Is it reproducible: Yes

 Description
 ===========
  When http://256.256.256.256:100/test/ is run through the url validator, it is incorrectly
  passed as a valid url. This is incorrect because the inet4 address should not be above
  255.


 Steps to Produce/Reproduce
 --------------------------
 String url = "http://256.256.256.256";
 UrlValidator validator =  new UrlValidator();
 boolean test = validator.isValid(url);

 Expected Results
 ----------------
 test == false // true


 Actual Results
 --------------
 test == true // true


 Workarounds
 -----------
 If you look in the isValidInet4Address method, there is an if statement
 if (iIpSegment > 255) {

   return true;

 }
 This should return false, and when switched, the urls no longer pass.


 Attachments
 -----------
 none


 Other Information
 -----------------
 How the bug was found and Agan's principles: understanding the system under test was the first step in locating the fault.
 Knowing that valid ipv4 addresses should be at or below 255 was a large help in locating where the failure may be.
 Making it fail and fail repeatedly was also relatively simple since the programming based tests consistently reported
 this bug after repeated runs. Looking into the code, the first file that was suspicious was the inet address validator. Since
 there were roughly 100 lines in that file it was simple to locate where the error was happening. I did a quick search for the number
 255 and found the error on line 96.


BUG REPORT:
==============================
Title: Error validating 4 and 5 digit port numbers

Class: Logic Error

Date: 3/7/16
Reported By: Martin Stryffeler
Email: stryffem@oregonstate.edu


Product:    URL Validator
Platform:   Windows 8.1
Browser:    NA


Is it reproducible: Yes

Description
===========
 When the URL Validator receives a URL with a port number that has four or five digits, it fails despite being
 a valid URL. This occurs every time a URL has a port number that is greater than 3 digits.


Steps to Produce/Reproduce
--------------------------
String url = "http://www.google.com:33333";
UrlValidator validator =  new UrlValidator();
boolean test = validator.isValid(url);

Expected Results
----------------
test == true


Actual Results
--------------
test == false


Other Information
-----------------
The fault is located in UrlValidator.java at line 158. This is where the program splits the input string into the
various elements that make up a URL. When the program gets the port number from the string, it only iterates up
to three characters.


BUG REPORT:
==============================
Title: Url validator doesn't correctly identify an authority from a different country as valid.

Class: Logic Error

Date: 3/9/16
Reported By: Justin Siddon
Email: siddonj@oregonstate.edu


Product:    URL Validator
Platform:   OSx                  Version: 10.11.3
Browser:    NA


Is it reproducible: Yes

Description
===========
 When a top-level domain authority is entered other than the United States, the
 urls are marked as invalid.


Steps to Produce/Reproduce
--------------------------
String url = "http://www.google.ru";
UrlValidator validator =  new UrlValidator();
boolean urlValid = validator.isValid(url);

Expected Results
----------------
urlValid == true;


Actual Results
--------------
urlValid == false;


Workarounds
-----------
If you look in DomainValidator.java, the array of valid country codes (COUNTRY_CODE_TLDS)
only contains values up to Italy. Beyond Italy no other countries will return as a valid top level domain.
This should include all countries with a top level domain. The error is on line 357 because that is where the last
top level domain is included.


Attachments
-----------
none


Other Information
-----------------
Localizing the bug with Agan's principles: I first began by observing url's in my test results that look like they should have passed
but were failing. Since I wasn't sure of the domain that was causing the fault I began to do an in depth review of the isValid()
method. This was using Agan's first rule "Understand the system under test". Next I used the "Make if Fail" principle
and directly passed failing urls into the isValid() method, that way I was sure it was isValid creating the error and not
something in our test suite. None of my results where change by passing urls directly into isValid so that means
there is a bug in isValid. Next I removed invalid input domain's one at a time until I only had 'valid' input domains (every url
I generated should pass). This was Agan's 5 principle, "Change one thing at a time". This allowed me to fully localize
the input domain causing the fault, the url authority. I then returned to Agan's first rule to ensure I understood how
the authority was validated with my urls that were failing. Stepping through the isValid code line by line lead me to
COUNTRY_CODE_TLDS array of strings being used to validate the top level domain. Since the url "google.ru" was failing I looked
to see if it did contain the "ru" top level domain. It didn't, which caused isValid()'s call to isValidTld() to return
false, making the url invalid.


BUG REPORT:
==============================
Title: URL Validator does not validate the world wide web part.

Class: “Logic Error”

Date: 3/8/16
Platform: Eclipse
Browser: Chrome and Mozilla

Description
-----------------
The URL validator does not check
the www part in the URL’s host name. The program should return true
when the URL has three w’ in its host name. Otherwise it should return false.
However, the validator does not check the number of w’s in the host name.
Using only one w in the host name returns true which should return false.

Expected Results
-----------------
When we check the following URL http://w.nytimes.com/ manually in the URL
Validator, the program should return false.

Actual Results
-----------------
Using the http://w.nytimes.com/ URL address returned True which should
return false.

Workarounds
-----------------
Add a new function to the program that checks the number of w’s in the host
name as well as the w, as this program returned True with three A’s in place of the W’s.


BUG REPORT:
==============================
Title: URL Validator does not validate the word `http` part.

Class: “Logic Error”

Date: 3/8/16
Platform: Eclipse
Browser: Chrome and Mozilla

Description
-----------------
The URL validator does not check the http part in the URL. The program
should return true when the URL has `http` or `https` in its URL. Otherwise
it should return false. However, the validator does not check the http part
in the URL. Anything we replace http part returned true.

Expected Results
-----------------
When we manually check the following URL `tttt://www.oregonstate.edu` in the
URL Validator, the program should return false.

Actual Results
-----------------
Using the tttt://www.oregonstate.edu` URL address returned True which should
return false.

Workarounds
-----------------
Add a new function to the program that checks http parts in the program.


BUG REPORT:
==============================
Title: IsValidQuery Function returns wrong result.

Class: “Logic Error”

Date: 3/8/16
Platform: Eclipse
Browser: Chrome and Mozilla

Is it reproducible: Yes

Description
-----------------
The isValidQuery function returns true if the query is null. Otherwise the
function returns the “QUERY_PATTERN.matcher(query).matches();” bool value. The
exclamation point infront of the return statement makes changes the bool value
to its opposite.

Expected Results
-----------------
The function returns the following code if the query is not null:
Return Query_Pattern.matcher(query).matches()


Actual Results
-----------------
The function returns the following code:
!QUERY_PATTERN.matcher(query).matches();

Workarounds
-----------------
Take out the exclamation point in the second return statement.
Return !Query_Pattern.matcher(query).matches() should change to
Return Query_Pattern.matcher(query).matches()

Attachments
-----------
none
